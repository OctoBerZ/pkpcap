package main

/*
#include "xele_struct.h"
*/
import "C"

import (
	"bytes"
	"encoding/binary"
	"fmt"
)

type BidAskPriceQty C.struct_BidAskPriceQty

// AkDecoder Deocder Abc
type AkDecoder struct {
	Endian binary.ByteOrder
}

// Decode decode function
func (dr *AkDecoder) Decode(data []byte) *AkMsg {
	msg := new(AkMsg)
	r := bytes.NewReader(data)
	binary.Read(r, dr.Endian, &msg.Head)
	switch msg.Head.messageType {
	case 3:
		msg.Body = new(AkIndex)
		msg.Type = ""
	case 5:
		msg.Body = new(AkEntrust)
		msg.Type = "Tick"
	case 4:
		msg.Body = new(AkTrade)
		msg.Type = "Tick"
	case 1:
		msg.Body = new(AkSnap)
		msg.Type = "Depth"
	case 2:
		msg.Body = new(AkBestOrder)
		msg.Type = ""
	}
	binary.Read(r, dr.Endian, msg.Body)
	return msg
}

//AkMsg Abc
type AkMsg struct {
	Head AkMsgHeader
	Type string
	Body interface{ ToString(int64) string }
}

func (msg *AkMsg) SaveType() string {
	return msg.Type
}

func (msg *AkMsg) ToString(recvTime int64) string {
	return msg.Body.ToString(recvTime)
}

type AkBestOrder C.struct_BestOrders

//AkMsgHeader Rishon UDP data header
type AkMsgHeader C.struct_MsgHead

//AkIndex Rishon index data struct
type AkIndex C.struct_Index

func (m *AkIndex) ToString(recvTime int64) string {
	return fmt.Sprintf(
		"%s, %d, %d, %s, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d",
		m.ExchangeID, m.OrigTime, m.ChannelNO, m.SecurityID,
		m.LastPx, m.PreClosePx, m.OpenPx, m.HighPx, m.LowPx, m.ClosePx, m.NumTrades, m.TotalVol, m.TotalValue, recvTime)
}

//AkEntrust Rishon entrust data struct
type AkEntrust C.struct_Order

func (m *AkEntrust) ToString(recvTime int64) string {
	return fmt.Sprintf(
		"%s, %d, %d, %d, %d, %d, %d, %c",
		m.SecurityID, m.ChannelNO, m.AppSeqNum,
		m.TransactTime, recvTime, m.Price, m.OrderQty, m.OrdType)
}

//AkTrade Rishon trade data struct
type AkTrade C.struct_Trade

func (m *AkTrade) ToString(recvTime int64) string {
	var rate float32 = 1e-6
	return fmt.Sprintf(
		"%s, %d, %d, %d, %d, %f, %d, %c",
		m.SecurityID, m.ChannelNO, m.AppSeqNum, m.TransactTime, recvTime, float32(m.LastPx)*rate, m.LastQty, m.ExecType)
}

//AkSnap Rishon snapshot data struct
type AkSnap C.struct_MarketDataSnapshot

func (m *AkSnap) ToString(recvTime int64) string {
	var rate float32 = 1e-6
	return fmt.Sprintf(
		"%s, %s, %d, %d, %f, %d, %f, %d, %f, %d, %f, %d, %d, %d, %f, %f, %f, %f, %d",
		m.SecurityID, m.ExchangeID, m.OrigTime, recvTime,
		float32(m.BidPrice[0])*rate, m.BidVolume[0], float32(m.AskPrice[0])*rate, m.AskVolume[0],
		float32(m.BidPrice[9])*rate, m.BidVolume[9], float32(m.AskPrice[9])*rate, m.AskVolume[9],
		m.TotalBidVol, m.TotalAskVol,
		float32(m.OpenPx)*rate, float32(m.HighPx)*rate, float32(m.LowPx)*rate, float32(m.LastPx)*rate, m.TotalVolume)
}
